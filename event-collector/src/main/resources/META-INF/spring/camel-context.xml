<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
	http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd ">
	<bean class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"
		id="props">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:app.properties</value>
				<value>file:app.properties</value>
				<value>file:${karaf.home}/etc/app.properties</value>
				<value>file:etc/app.properties</value>
			</list>
		</property>
	</bean>

	<amq:broker useJmx="true" persistent="false">
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://0.0.0.0:61616" />
		</amq:transportConnectors>
	</amq:broker>

	<!-- Internal InfiniSpan cache -->
	<bean id="cacheManager" class="org.infinispan.manager.DefaultCacheManager"
		init-method="start" destroy-method="stop">
		<constructor-arg type="java.lang.String" value="infinispan.xml" />
	</bean>

	<!-- Embedded data base -->
	<bean id="h2db" class="org.h2.tools.Server" factory-method="createTcpServer"
		init-method="start" destroy-method="stop">
		<constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,8643,-baseDir,./h2dbstore" />
	</bean>
	
	<bean id="h2Server" class="org.h2.tools.Server"
		factory-method="createWebServer" depends-on="h2db"
		init-method="start" lazy-init="false">
		<constructor-arg value="-web,-webPort,11111,-baseDir,./h2dbstore" />
	</bean>

	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="${brokerUrl}" />
		<property name="userName" value="${brokerUsr}" />
		<property name="password" value="${brokerPwd}" />
	</bean>

	<bean id="genericObjectFactory" class="com.redhat.empowered.generic.model.GenericObjectFactory" />

	<bean id="triggerMetricCalculation"
		class="com.redhat.empowered.generic.processors.TriggerMetricCalculation">
		<constructor-arg ref="cacheManager" />
		<constructor-arg value="metric" />
		<constructor-arg ref="genericObjectFactory" />
	</bean>

	<camelContext id="event-collector" xmlns="http://camel.apache.org/schema/spring">

		<endpoint id="datagrid" uri="infinispan://{{dgUrl}}">
		</endpoint>

		<restConfiguration component="netty4-http" port="7123"
			bindingMode="json" enableCORS="true" />
		<rest id="svc" path="/">
			<get uri="clearCache/{cacheName}" id="clearCacheOp">
				<to uri="direct:clearCacheOp" />
			</get>
			<get uri="{cacheName}/{uid}" id="queryOp">
				<to uri="direct:queryOp" />
			</get>
		</rest>

		<route id="clearCacheRoute">
			<from uri="direct:clearCacheOp" />
			<setHeader headerName="CamelInfinispanCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation">
				<constant>CamelInfinispanOperationClear</constant>
			</setHeader>
			<to ref="datagrid" />
			<setBody>
				<simple>${headers.cacheName} cleared!</simple>
			</setBody>
		</route>

		<!-- rest service to query events -->
		<route id="queryOpRoute">
			<from id="queryOpStarter" uri="direct:queryOp"></from>
			<setHeader headerName="CamelInfinispanKey">
				<simple>${headers.uid}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanCacheName">
				<simple>${headers.cacheName}</simple>
			</setHeader>
			<setHeader headerName="CamelInfinispanOperation">
				<constant>CamelInfinispanOperationGet</constant>
			</setHeader>
			<to ref="datagrid" />
			<setBody>
				<simple>${header.CamelInfinispanOperationResult}</simple>
			</setBody>
		</route>



		<!-- calculating metrics -->
		<route id="calculateMetrics">
			<from id="calculateMetricsStarter"
				uri="activemq:queue:app.stats.updatestats?acknowledgementModeName=CLIENT_ACKNOWLEDGE" />
			<unmarshal>
				<serialization />
			</unmarshal>
			<log message="trying to process pojo of type ${body.class} - ${body.value}"></log>

			<setHeader headerName="eventTimestmp">
				<simple>${body.timestmp}</simple>
			</setHeader>

			<!-- hourly -->
			<setHeader headerName="key">
				<simple>${body.indicatorClass}.hourly.${date:header.eventTimestmp:yyyyMMddHH}</simple>
			</setHeader>
			<process ref="triggerMetricCalculation"></process>

			<setHeader headerName="key">
				<simple>${body.indicatorClass}.daily.${date:header.eventTimestmp:yyyyMMdd}</simple>
			</setHeader>
			<process ref="triggerMetricCalculation"></process>

			<setHeader headerName="key">
				<simple>${body.indicatorClass}.monthly.${date:header.eventTimestmp:yyyyMM}</simple>
			</setHeader>
			<process ref="triggerMetricCalculation"></process>
		</route>


	</camelContext>
</beans>
